generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  cpf           String    @unique
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  products      Product[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  category    String
  stock       Float
  status      String
  unity       String
  price       Float
  imageUrl    String?
  weight      Float?
  dimensions  String?
  userId      String
  dateAdded   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Article {
  id                 Int      @id @default(autoincrement())
  title              String
  subtitle           String
  thumbnailText      String
  content            String
  publishedAt        DateTime
  author             Author   @relation(fields: [authorId], references: [id])
  authorId           Int
  category           Category @relation(fields: [categoryId], references: [id])
  categoryId         Int
  tags               Tag[]    @relation("ArticleTags")
  imageUrl           String?
  status             String
  Media              Media[]
}

model Author {
  id                Int       @id @default(autoincrement())
  name              String
  bio               String?
  profile_picture_url String?
  articles          Article[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  articles    Article[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleTags")
}

model Media {
  id        Int     @id @default(autoincrement())
  url       String
  type      String
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
}
