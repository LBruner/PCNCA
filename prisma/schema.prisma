generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  cpf              String    @unique
  email            String?   @unique
  password         String
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  products         Product[]
  suppliedProducts Product[] @relation("SupplierRelation")
  sales            Sale[]
}

model Product {
  id             Int        @id @default(autoincrement())
  name           String
  description    String?
  category       String
  stock          Float
  status         String
  unity          String
  price          Float
  tipoCommoditie String     @default("Agrícola")
  // commodityTypeId Int @default(1)
  // commodity_type  CommodityType @relation(fields: [commodityTypeId], references: [id])
  imageUrl       String?
  weight         Float?
  dimensions     String?
  userId         String
  user           User       @relation(fields: [userId], references: [id]) // Dono do produto
  supplierId     String     @default("clydofcr8000oh3tdxqhk1rqb")
  supplier       User       @relation("SupplierRelation", fields: [supplierId], references: [id]) // Relação com User como fornecedor
  createdAt      DateTime   @default(now()) // Data de criação do produto
  dateAdded      DateTime   @default(now())
  saleItems      SaleItem[]
}

// model CommodityType {
//   id       Int       @id @default(autoincrement())
//   name     String
//   products Product[]
// }

model Sale {
  id              Int        @id @default(autoincrement())
  date            DateTime   @default(now())
  totalPrice      Float
  discount        Float?
  paymentMethod   String
  status          String
  customerName    String
  deliveryAddress String?
  sellerId        String
  seller          User       @relation(fields: [sellerId], references: [id])
  saleItems       SaleItem[]
}

model SaleItem {
  id         Int     @id @default(autoincrement())
  productId  Int
  product    Product @relation(fields: [productId], references: [id])
  saleId     Int
  sale       Sale    @relation(fields: [saleId], references: [id])
  quantity   Float
  unitPrice  Float
  totalPrice Float
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Article {
  id            Int      @id @default(autoincrement())
  title         String
  subtitle      String
  thumbnailText String
  content       String
  publishedAt   DateTime
  author        Author   @relation(fields: [authorId], references: [id])
  authorId      Int
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  tags          Tag[]    @relation("ArticleTags")
  imageUrl      String?
  status        String
  Media         Media[]
}

model Author {
  id                  Int       @id @default(autoincrement())
  name                String
  bio                 String?
  profile_picture_url String?
  articles            Article[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  url         String?
  articles    Article[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleTags")
}

model Media {
  id        Int     @id @default(autoincrement())
  url       String
  type      String
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
}

// schema.prisma
model Pessoa {
  id                Int      @id @default(autoincrement())
  nome              String
  email             String   @unique
  cpf               String?  @unique
  dataNascimento    DateTime
  rg                String? // Opcional
  endereco          String
  cep               String
  imagem            String
  cidade            String
  estado            String
  contato           String
  categoria         String
  razaoSocial       String?
  cnpj              String?  @unique
  inscricaoEstadual String?
  nomeFantasia      String?
  tipo              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("pessoa")
}

model TipoPessoa {
  id   Int    @id @default(autoincrement())
  nome String
}
